import{config as e}from"@onflow/config";import*as t from"@onflow/types";import*as n from"@onflow/fcl";import{config as r}from"@onflow/fcl";import{ec as o}from"elliptic";import{SHA3 as a}from"sha3";function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const c={emulator:{FungibleToken:"0xee82856bf20e2aa6",FlowFees:"0xe5a8b7f23e8b548f",FlowStorageFees:"0xf8d6e0586b0a20c7",FlowToken:"0x0ae53cb6e3f42a79"},testnet:{FungibleToken:"0x9a0766d93b6608b7",NonFungibleToken:"0x631e88ae7f1d7c20",FlowClusterQC:"0x9eca2b38b18b5dfe",FlowDKG:"0x9eca2b38b18b5dfe",FlowEpoch:"0x9eca2b38b18b5dfe",FlowIDTableStaking:"0x9eca2b38b18b5dfe",FlowToken:"0x7e60df042a9c0868",LockedTokens:"0x95e019a17d0e23d7",StakingProxy:"0x7aad92e5a0715d21",FlowStakingCollection:"0x95e019a17d0e23d7",FUSD:"0xe223d8a629e49c68"},mainnet:{FungibleToken:"0xf233dcee88fe0abe",NonFungibleToken:"0x1d7e57aa55817448",FlowClusterQC:"0x8624b52f9ddcd04a",FlowDKG:"0x8624b52f9ddcd04a",FlowEpoch:"0x8624b52f9ddcd04a",FlowIDTableStaking:"0x8624b52f9ddcd04a",FlowFees:"0xf919ee77447b7497",FlowToken:"0x1654653399040a61",LockedTokens:"0x8d0e87b65159ae63",StakingProxy:"0x62430cf28c26d095",FlowStakingCollection:"0x8d0e87b65159ae63",FUSD:"0x3c5959b568896393"}},i={emulator:{},testnet:{},mainnet:{}},u=e=>{for(const t of Object.keys(i)){const n=e[t],{name:r}=e;i[t]=s({},i[t],"object"==typeof e[t]?n:{[r]:n})}},l={mainnet:"https://access-mainnet-beta.onflow.org",testnet:"https://access-testnet.onflow.org",emulator:"http://localhost:8080"},d=async()=>{const t=await(async()=>await e().get("ix.env")||"emulator")();return s({},c[t]||c.emulator,i[t]||i.emulator)},f=async(t="emulator",n={})=>{const r=t.toLowerCase();if(!c[r])throw new Error(`Provided value "${r}" is not supported. Try "emulator", "testnet" or "mainnet". Default: "emulator"`);const{port:o,endpoint:a,limit:s,extend:i}=n,d=a||("emulator"===r&&o?`http://localhost:${o}`:l[r]);await e().put("ix.env",r),s&&await e().put("ix.executionLimit",s),i&&u(i),await e().put("accessNode.api",d)},p=e=>e.split(/\s/).map(e=>e.replace(/\s/g,"")).filter(e=>e.length>0&&"import"!==e&&"from"!==e),w=(e,t)=>{const[n,r]=t;return e[n]=r,e},m=e=>e&&0!==e.length?e.split("\n").filter(e=>e.includes("import")).map(p).reduce(w,{}):{},g=(e,t={})=>{const n=m(e),r=[];for(const e in n)!t[e]&&Object.prototype.hasOwnProperty.call(n,e)&&r.push(e);return r},x=(e=[],t="")=>{const n="Missing imports for contracts:";console.error(t?`${t} ${n}`:n,e)},y=(e,t,n="")=>{const r=g(e,t);r.length>0&&x(r,n)},b=/(\s*import\s*)([\w\d]+)(\s+from\s*)([\w\d".\\/]+)/g,h=(e,t,n=!0)=>e.replace(b,(e,r,o,a,s)=>{const c=n?o:s;return`${r}${o} from ${(t instanceof Function?t(c):t[c])||s}`}),F=["public","private","storage"],v=e=>{const[t]=e.split("");return t.toUpperCase()+e.slice(1)},k=e=>e.replace(/-/g,"_").split("_").map((e,t)=>t>0?v(e):e).join(""),S=(e,t,n)=>n?e.replace(t,"").split(n):e.replace(t,"").split($(e)),$=e=>{switch(!0){case e.indexOf("//")>=0:return"//";case e.indexOf("/")>=0:return"/";case e.indexOf("\\")>=0:return"\\";default:return""}},E=e=>e.replace(/\s+/g," "),I="contract",T="transaction",N="script",P=e=>e.split(",").map(e=>e.replace(/\s*/g,"")).filter(e=>""!==e),A=e=>e.replace(/(\/\*[\s\S]*?\*\/)|(\/\/.*)/g,""),C=(e,t)=>{const n=A(e),r=E(n.replace(/[\n\r]/g,""));if(r){const e=new RegExp(t,"g").exec(r);if(e)return""===e[1]?[]:P(e[1])}return[]},j=e=>C(e,"(?:prepare\\s*\\(\\s*)([^\\)]*)(?:\\))"),B=e=>C(e,"(?:fun\\s+main\\s*\\(\\s*)([^\\)]*)(?:\\))"),D=e=>C(e,"(?:transaction\\s*\\(\\s*)([^\\)]*)(?:\\))"),O=e=>U(e).contractName,U=e=>{const t=A(e).replace(/(resource|struct)\s+\w+\s*{[\s\S]+?}/g,""),n=/(?:access\(\w+\)|pub)\s+contract\s+(?:interface)*\s*(\w*)(\s*{[.\s\S]*init\s*\((.*?)\)[.\s\S]*})?/g.exec(t);if(!n||n.length<2)throw new Error("Contract Error: can't find name of the contract");return{contractName:n[1],args:n[3]||""}},q=e=>{const t=A(e);if(/transaction\s*(\(\s*\))*\s*/g.test(t)){const e=j(t),n=D(t);return{type:"transaction",signers:e.length,args:n}}if(/pub\s+fun\s+main\s*/g.test(t))return{type:"script",args:B(t)};if(/\w+\s+contract\s+(\w*\s*)\w*/g.test(t)){const{contractName:e,args:n}=U(t);return{type:"contract",signers:1,args:n,contractName:e}}return{type:"unknown"}},K=e=>!e||"string"!=typeof e,L=e=>!K(e)&&(e.startsWith("Int")||e.startsWith("UInt")||e.startsWith("Word")),M=e=>{if(K(e))return!1;const t=e.replace(/\s/g,"");return t.startsWith("[")&&t.endsWith("]")},_=e=>{if(K(e))return!1;const t=e.replace(/\s/g,"");return t.startsWith("{")&&t.endsWith("}")},G=e=>M(e)||_(e),R={ARGUMENT:"argument"},H=async e=>{const{type:t}=e,n=await r().get("ix.plugins")||{},o=n[t]||[];await r().put("ix.plugins",s({},n,{[t]:[...o,e]}))},Q=async e=>{const t=(await r().get("ix.plugins")||{})[e];return!!(t&&t.length>0)&&t},z=e=>e.split(/(\w+)\s*:\s*([\w{}[\]:\s?]*)/).filter(e=>""!==e).map(e=>e.replace(/\s*/g,"")),W=e=>z(e)[1],J=e=>/{(.*)}/.exec(e)[1].split(/([^:]*):(.*)/).map(e=>e.replace(/\s/g,"")).filter(e=>e),V=e=>/\[(.*)\]/.exec(e)[1].replace(/\s+/g,""),X=(e,t,n="")=>{if(t>e){const r=`Incorrect number of arguments: found ${e} of ${t}`;console.error(n?`${n} ${r}`:r)}},Y=(e="items",t,n,r="")=>{if(n!==t){const o=`Incorrect number of ${e}: found ${t} of ${n}`;console.error(r?`${r} ${o}`:o)}},Z=e=>!K(e)&&(e.includes("?")?t.Optional(t[(e=>e.slice(0,-1))(e)]):t[e]),ee=e=>{if(G(e))switch(!0){case M(e):{const n=V(e);return t.Array(ee(n))}case _(e):{const[n,r]=J(e),o={key:ee(n),value:ee(r)};return t.Dictionary(o)}default:return Z(e)}return Z(e)},te=async(e,t)=>{const r=await Q(R.ARGUMENT);let o=t,a=e;if(r){let n=await(async(e,t)=>{let n=e.type,r=e.value;for(let e=0;e<t.length;e++){const{resolver:o}=t[e],a=await o(n,r);n=a.type,r=a.value}return{type:n,value:r}})({type:e,value:t},r);o=n.value,a=n.type}const s=ee(a);switch(!0){case(e=>{if(K(e))return!1;let t=e.endsWith("?")?e.slice(0,-1):e;return L(t)||(e=>"String"===e)(t)||(e=>"Character"===e)(t)||(e=>"Bool"===e)(t)})(a):return n.arg(o,s);case(e=>!K(e)&&(e.startsWith("Fix64")||e.startsWith("UFix64")))(a):return null===o?n.arg(null,s):(isNaN(parseFloat(o))&&(e=>{throw new Error("Type Error: Expected proper value for fixed type")})(),n.arg(parseFloat(o).toFixed(8),s));case(e=>"Address"===e||"Address?"===e)(a):{const e=null==(c=o)?null:"0x"+(e=>null==e?null:e.replace(/^0x/,""))(c);return n.arg(e,s)}case(e=>"Path"===e||"Path?"===e)(a):return n.arg((e=>{if(e.startsWith("/")){const t=e.slice(1).split("/");if(2!==t.length)throw Error("Incorrect Path - identifier missing");if(!F.includes(t[0]))throw Error("Incorrect Path - wrong domain");const[n,r]=t;return{domain:n,identifier:r}}throw Error("Incorrect Path - shall start with `/`")})(o),s);case M(a):{const e=V(a);if(G(e)){const t=await Promise.all(o.map(async t=>{const{value:n}=await te(e,t);return n}));return n.arg(t,s)}return n.arg(o,s)}case _(a):{const[e,t]=J(a),r=[],c=Object.keys(o);for(let n=0;n<c.length;n++){const a=c[n];let s;s=G(t)?(await te(t,o[a])).value:o[a];const i=L(e)?parseInt(a):a;r.push({key:i,value:s})}return n.arg(r,s)}default:throw`${a} is not supported`}var c},ne=async(e=[],t)=>{if(e.length>t.length)throw new Error("Not enough arguments");return Promise.all(t.map(async(t,n)=>{const r=await te(e[n],t);var o;return(o=r).xform.asArgument(o.value),r}))},re=async(e,t=[])=>{const n=q(e).args.map(W);return ne(n,t)},oe=async(e,t)=>{if(0===e.length)return[];const r=e[0];return Array.isArray(r)&&r.length>0&&r[r.length-1].asArgument?(e=>e.reduce((e,t)=>[...e,...((e,t)=>{const r=e[e.length-1];return e.slice(0,-1).map(e=>((e,t)=>n.arg(e,t))(e,r))})(t)],[]))(e):re(t,e)},ae=e=>null==e?null:e.replace(/^0x/,""),se=new o("p256"),ce=(e,t)=>{const n=se.keyFromPrivate(Buffer.from(e,"hex")).sign((e=>{const t=new a(256);return t.update(Buffer.from(e,"hex")),t.digest()})(t)),r=n.r.toArrayLike(Buffer,"be",32),o=n.s.toArrayLike(Buffer,"be",32);return Buffer.concat([r,o]).toString("hex")},ie=e=>{if("string"==typeof e)return e;if("object"==typeof e){if(void 0===e.privateKey)throw Error("privateKey is required");if(void 0===e.address)throw Error("address is required");void 0===e.keyId&&console.warning(`key index have incorrect format. found '${typeof e.keyId}', required 'num'`);const{address:t,privateKey:r,keyId:o=0}=e;return((e,t,r=0)=>async(o={})=>s({},o,{tempId:`${e=ae(e)}-${r}`,addr:n.sansPrefix(e),keyId:r,signingFunction:async n=>{return{keyId:r,addr:(o=e,null==o?null:"0x"+ae(o)),signature:ce(t,n.message)};var o}}))(t,r,o)}throw Error("Incorrect format for signer")},ue=async(t,r)=>{const{code:o,cadence:a,args:c,addressMap:i,limit:u,processed:l}=t,f=o||a,p=s({},await d(),i),w=l?f:h(f,p),m="script"===r?[n.script(w)]:[n.transaction(w)];if(c){const e=await oe(c,f);m.push(n.args(e))}const g=await e().get("ix.executionLimit");if(m.push(n.limit(u||g||100)),"transaction"===r){const{proposer:e,payer:r,signers:o=[]}=t,a=0===o.length?[r]:o,s=e||r;m.push(n.payer(ie(r))),m.push(n.proposer(ie(s))),m.push(n.authorizations(a.map(ie)))}return n.send(m)},le=async e=>{const{raw:t=!1}=e;try{const r=await ue(e,"script");return t?[r.encodedData,null]:[await n.decode(r),null]}catch(e){return[null,e]}},de=async e=>{const{wait:t="seal"}=e;try{const r=await ue(e,"transaction");if(t){const e=(e=>{if("string"==typeof e){const t=e.toLowerCase();if(t.includes("final"))return"onceFinalized";if(t.includes("exec"))return"onceExecuted";if(t.includes("seal"))return"onceSealed"}return console.log(`⚠️ [33mStatus value [1m[35m"${e}"[33m[2m is not supported. Reverting to [32m"onceSealed"[0m`),"onceSealed"})(t);return[s({txId:r},await n.tx(r)[e]()),null]}return[r.transactionId,null]}catch(e){return[null,e]}},fe=async e=>{const{name:t,to:n,payer:r,proposer:o,code:a,update:s=!1,processed:c=!1,addressMap:i={}}=e,u=c?a:h(a,i),l=s?"\n    transaction(name: String, code: String) {\n      prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        \n        acct.contracts.add(\n          name: name,\n          code: decoded,\n        )\n      }\n    }\n  ":"\n  transaction(name: String, code: String){\n    prepare(acct: AuthAccount){\n      let decoded = code.decodeHex()\n      \n      if acct.contracts.get(name: name) == nil {\n        acct.contracts.add(name: name, code: decoded)\n      } else {\n        acct.contracts.update__experimental(name: name, code: decoded)\n      }\n    }\n  }\n",d=Buffer.from(u,"utf8").toString("hex");let f=n,p=n;return r&&(p=r,f=o||r),de({payer:p,proposer:f,signers:[n],code:l,args:[t,d]})},pe=async e=>fe(s({},e,{update:!0}));export{I as CONTRACT,R as PLUGIN_TYPES,N as SCRIPT,T as TRANSACTION,W as argType,v as capitalizeFirstLetter,E as collapseSpaces,fe as deployContract,le as executeScript,u as extendEnvironment,C as extract,O as extractContractName,U as extractContractParameters,m as extractImports,B as extractScriptArguments,j as extractSigners,D as extractTransactionArguments,P as generateSchema,V as getArrayType,J as getDictionaryTypes,d as getEnvironment,Q as getPlugins,$ as getSplitCharacter,q as getTemplateInfo,te as mapArgument,ne as mapArguments,re as mapValuesToCode,g as missingImports,de as mutate,le as query,H as registerPlugin,h as replaceImportAddresses,x as report,X as reportArguments,Y as reportMissing,y as reportMissingImports,oe as resolveArguments,de as sendTransaction,f as setEnvironment,z as splitArgs,S as trimAndSplit,k as underscoreToCamelCase,pe as updateContract};
//# sourceMappingURL=main.modern.js.map
