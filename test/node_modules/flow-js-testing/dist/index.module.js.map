{"version":3,"file":"index.module.js","sources":["../src/config.js","../src/init.js","../src/address.js","../src/crypto.js","../src/utils.js","../src/interaction.js","../src/generated/transactions/createAccount.js","../src/generated/transactions/deployContract.js","../src/generated/transactions/initManager.js","../src/generated/transactions/mintTokens.js","../src/generated/transactions/registerContract.js","../src/generated/transactions/scratch.js","../src/generated/transactions/setBlockOffset.js","../src/generated/transactions/updateContract.js","../src/generated/transactions/index.js","../src/deploy-code.js","../src/generated/contracts/FlowManager.js","../src/generated/scripts/checkManager.js","../src/generated/scripts/getAccountAddress.js","../src/generated/scripts/getBalance.js","../src/generated/scripts/getBlockOffset.js","../src/generated/scripts/getContractAddress.js","../src/generated/scripts/index.js","../src/generated/index.js","../src/manager.js","../src/contract.js","../src/imports.js","../src/file.js","../src/templates.js","../src/flow-token.js","../src/account.js","../src/jest-asserts.js","../src/transformers.js","../src/emulator.js"],"sourcesContent":["/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { flowConfig } from \"@onflow/fcl-config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Get value from provided scope and path.\n * @param scope - scope value.\n * @param path - value path in config (flow.json) file.\n * @param fallback - fallback value.\n * @returns {*} - value at specified scope and path.\n */\nexport const get = (scope, path, fallback) => {\n  if (typeof path === \"string\") return get(scope, path.split(\"/\"), fallback);\n  if (!path.length) return scope;\n  try {\n    const [head, ...rest] = path;\n    return get(scope[head], rest, fallback);\n  } catch (_error) {\n    return fallback;\n  }\n};\n\n/**\n * Set globally available config value.\n * @param {string} key - key to be used to access stored value.\n * @param {string} env - value key in the environment (for example .env file).\n * @param {string} conf - value path in config (flow.json) file.\n * @param fallback - fallback value to be used if env and conf are absent.\n */\nexport const set = (key, env, conf, fallback) => {\n  let value = get(flowConfig(), conf, fallback);\n  if (!value) {\n    value = fallback;\n  }\n  config().put(key, value);\n};\n\n/**\n * Returns config value at specified key.\n * @param key - key to the value.\n * @returns {Promise<*>} - value at specified key.\n */\nexport const getConfigValue = async (key) => {\n  return config().get(key);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { set } from \"./config\";\nimport { config } from \"@onflow/config\";\n\n/**\n * Inits framework variables, storing private key of service account and base path\n * where Cadence files are stored.\n * @param {string} basePath - path to the folder with Cadence files to be tested.\n * @param {number} [props.port] - port to use for accessAPI\n * @param {number} [props.pkey] - private key to use for service account in case of collisions\n */\nexport const init = async (basePath, props = {}) => {\n  const { port = 8080 } = props;\n  const { pkey = \"48a1f554aeebf6bf9fe0d7b5b79d080700b073ee77909973ea0b2f6fbc902\" } = props;\n\n  set(\"PRIVATE_KEY\", process.env.PK, \"accounts/emulator-account/key\", pkey);\n  set(\n    \"SERVICE_ADDRESS\",\n    process.env.SERVICE_ADDRESS,\n    \"accounts/emulator-account/address\",\n    \"f8d6e0586b0a20c7\",\n  );\n  set(\"BASE_PATH\", process.env.BASE_PATH, \"testing/paths\", basePath);\n\n  config().put(\"accessNode.api\", `http://localhost:${port}`);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const sansPrefix = (address) => {\n  if (address == null) return null;\n  return address.replace(/^0x/, \"\");\n};\n\nexport const withPrefix = (address) => {\n  if (address == null) return null;\n  return \"0x\" + sansPrefix(address);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ec as EC } from \"elliptic\";\nimport { SHA3 } from \"sha3\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as rlp from \"rlp\";\nimport { config } from \"@onflow/config\";\nimport { sansPrefix, withPrefix } from \"./address\";\nconst ec = new EC(\"p256\");\n\nconst hashMsgHex = (msgHex) => {\n  const sha = new SHA3(256);\n  sha.update(Buffer.from(msgHex, \"hex\"));\n  return sha.digest();\n};\n\nexport const signWithKey = (privateKey, msgHex) => {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"));\n  const sig = key.sign(hashMsgHex(msgHex));\n  const n = 32; // half of signature length?\n  const r = sig.r.toArrayLike(Buffer, \"be\", n);\n  const s = sig.s.toArrayLike(Buffer, \"be\", n);\n  return Buffer.concat([r, s]).toString(\"hex\");\n};\n\nexport const authorization =\n  (addr, keyId = 0) =>\n  async (account = {}) => {\n    const serviceAddress = await config().get(\"SERVICE_ADDRESS\");\n    const pkey = await config().get(\"PRIVATE_KEY\");\n\n    addr = sansPrefix(addr || serviceAddress);\n\n    const signingFunction = async (data) => ({\n      keyId,\n      addr: withPrefix(addr),\n      signature: signWithKey(pkey, data.message),\n    });\n\n    return {\n      ...account,\n      tempId: `${addr}-${keyId}`,\n      addr: fcl.sansPrefix(addr),\n      keyId,\n      signingFunction,\n    };\n  };\n\nexport const pubFlowKey = async () => {\n  const keys = ec.keyFromPrivate(Buffer.from(await config().get(\"PRIVATE_KEY\"), \"hex\"));\n  const publicKey = keys.getPublic(\"hex\").replace(/^04/, \"\");\n  return rlp\n    .encode([\n      Buffer.from(publicKey, \"hex\"), // publicKey hex to binary\n      2, // P256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      3, // SHA3-256 per https://github.com/onflow/flow/blob/master/docs/accounts-and-keys.md#supported-signature--hash-algorithms\n      1000, // give key full weight\n    ])\n    .toString(\"hex\");\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const isObject = (arg) => typeof arg === \"object\" && arg !== null;\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fcl from \"@onflow/fcl\";\nimport { resolveArguments } from \"flow-cadut\";\nimport { authorization } from \"./crypto\";\nimport { getTransactionCode, getScriptCode, defaultsByName } from \"./file\";\nimport { resolveImports, replaceImportAddresses } from \"./imports\";\nimport { getServiceAddress } from \"./manager\";\nimport { isObject } from \"./utils\";\n\nconst DEFAULT_LIMIT = 999;\n\nexport const extractParameters = (ixType) => {\n  return async (params) => {\n    let ixCode, ixName, ixSigners, ixArgs, ixService, ixTransformers, ixLimit;\n\n    if (isObject(params[0])) {\n      const [props] = params;\n      const { name, code, args, signers, transformers, limit, service = false } = props;\n\n      ixService = service;\n\n      if (!name && !code) {\n        throw Error(\"Both `name` and `code` are missing. Provide either of them\");\n      }\n      ixName = name;\n      ixCode = code;\n\n      ixSigners = signers;\n      ixArgs = args;\n      ixTransformers = transformers || [];\n      ixLimit = limit;\n    } else {\n      if (ixType === \"script\") {\n        [ixName, ixArgs, ixLimit, ixTransformers] = params;\n      } else {\n        [ixName, ixSigners, ixArgs, ixLimit, ixTransformers] = params;\n      }\n    }\n\n    // Check that limit is always set\n    ixLimit = ixLimit || DEFAULT_LIMIT;\n\n    if (ixName) {\n      const getIxTemplate = ixType === \"script\" ? getScriptCode : getTransactionCode;\n      ixCode = await getIxTemplate({ name: ixName });\n    }\n\n    // We need a way around to allow initial scripts and transactions for Manager contract\n    let deployedContracts;\n    if (ixService) {\n      deployedContracts = defaultsByName;\n    } else {\n      deployedContracts = await resolveImports(ixCode);\n    }\n\n    const serviceAddress = await getServiceAddress();\n    const addressMap = {\n      ...defaultsByName,\n      ...deployedContracts,\n      FlowManager: serviceAddress,\n    };\n\n    ixCode = replaceImportAddresses(ixCode, addressMap);\n\n    // Apply all the necessary transformations to the code\n    for (const i in ixTransformers) {\n      const transformer = ixTransformers[i];\n      ixCode = await transformer(ixCode);\n    }\n\n    return {\n      code: ixCode,\n      signers: ixSigners,\n      args: ixArgs,\n      limit: ixLimit,\n    };\n  };\n};\n\n/**\n * Submits transaction to emulator network and waits before it will be sealed.\n * Returns transaction result.\n * @param {string} [props.name] - Name of Cadence template file\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {string} [props.code] - Cadence code of the transaction.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @param {[string]} [props.signers] - list of signers, who will authorize transaction, specified as array of addresses.\n * @returns {Promise<any>}\n */\n\nexport const sendTransaction = async (...props) => {\n  try {\n    const extractor = extractParameters(\"tx\");\n    const { code, args, signers, limit } = await extractor(props);\n\n    const serviceAuth = authorization();\n\n    // set repeating transaction code\n    const ix = [\n      fcl.transaction(code),\n      fcl.payer(serviceAuth),\n      fcl.proposer(serviceAuth),\n      fcl.limit(limit),\n    ];\n\n    // use signers if specified\n    if (signers) {\n      const auths = signers.map((address) => authorization(address));\n      ix.push(fcl.authorizations(auths));\n    } else {\n      // and only service account if no signers\n      ix.push(fcl.authorizations([serviceAuth]));\n    }\n\n    // add arguments if any\n    if (args) {\n      const resolvedArgs = await resolveArguments(args, code);\n      ix.push(fcl.args(resolvedArgs));\n    }\n    const response = await fcl.send(ix);\n    const result = await fcl.tx(response).onceExecuted();\n\n    return [result, null];\n  } catch (e) {\n    return [null, e];\n  }\n};\n\n/**\n * Sends script code for execution. Returns decoded value\n * @param {string} props.code - Cadence code of the script to be submitted.\n * @param {string} props.name - name of the file to source code from.\n * @param {[any]} props.args - array of arguments specified as tupple, where last value is the type of preceding values.\n * @returns {Promise<*>}\n */\n\nexport const executeScript = async (...props) => {\n  try {\n    const extractor = extractParameters(\"script\");\n    const { code, args, limit } = await extractor(props);\n\n    const ix = [fcl.script(code), fcl.limit(limit)];\n    // add arguments if any\n    if (args) {\n      const resolvedArgs = await resolveArguments(args, code);\n      ix.push(fcl.args(resolvedArgs));\n    }\n    const response = await fcl.send(ix);\n    const result = await fcl.decode(response);\n    return [result, null];\n  } catch (e) {\n    return [null, e];\n  }\n};\n","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction (_ name: String, pubKey: String, manager: Address) {\r\n    prepare( admin: AuthAccount) {\r\n        let newAccount = AuthAccount(payer:admin)\r\n        newAccount.addPublicKey(pubKey.decodeHex())\r\n\r\n        let linkPath = FlowManager.accountManagerPath\r\n        let accountManager = getAccount(manager)\r\n                            .getCapability(linkPath)!\r\n                            .borrow<&FlowManager.Mapper>()!\r\n        \r\n        // Create a record in account database\r\n        let address = newAccount.address\r\n        accountManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for createAccount transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const createAccountTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `createAccount =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends createAccount transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const createAccount = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await createAccountTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `createAccount =>`);\n  reportMissing(\"signers\", signers.length, 1, `createAccount =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction,\n} from 'flow-cadut'\n\nexport const CODE = `\nimport FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n        acct.contracts.add(\n           name: name,\n           code: decoded,\n           ##ARGS-LIST##\n        )\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for deployContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const deployContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `deployContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends deployContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const deployContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await deployContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `deployContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `deployContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction ( code: String ) {\n    prepare( admin: AuthAccount) {\n        admin.contracts.add(\n           name: \"FlowManager\",\n           code: code.decodeHex(),\n        )\n   }\n  }\n`;\n\n/**\n* Method to generate cadence code for initManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const initManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `initManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends initManager transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const initManager = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await initManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `initManager =>`);\n  reportMissing(\"signers\", signers.length, 1, `initManager =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FungibleToken from 0xFUNGIBLETOKENADDRESS\nimport ExampleToken from 0xTOKENADDRESS\n\ntransaction(recipient: Address, amount: UFix64) {\n    let tokenAdmin: &ExampleToken.Administrator\n    let tokenReceiver: &{FungibleToken.Receiver}\n\n    prepare(signer: AuthAccount) {\n        self.tokenAdmin = signer\n        .borrow<&ExampleToken.Administrator>(from: /storage/exampleTokenAdmin)\n        ?? panic(\"Signer is not the token admin\")\n\n        self.tokenReceiver = getAccount(recipient)\n        .getCapability(/public/exampleTokenReceiver)!\n        .borrow<&{FungibleToken.Receiver}>()\n        ?? panic(\"Unable to borrow receiver reference\")\n    }\n\n    execute {\n        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)\n        let mintedVault <- minter.mintTokens(amount: amount)\n\n        self.tokenReceiver.deposit(from: <-mintedVault)\n\n        destroy minter\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for mintTokens transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const mintTokensTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `mintTokens =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends mintTokens transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const mintTokens = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await mintTokensTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `mintTokens =>`);\n  reportMissing(\"signers\", signers.length, 1, `mintTokens =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\ntransaction(name: String, address: Address) {\r\n    prepare(signer: AuthAccount){\r\n        let linkPath = FlowManager.contractManagerPath\r\n        let contractManager = signer\r\n                                .getCapability(linkPath)!\r\n                                .borrow<&FlowManager.Mapper>()!\r\n        contractManager.setAddress(name, address: address)\r\n    }\r\n}\r\n\n`;\n\n/**\n* Method to generate cadence code for registerContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const registerContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `registerContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends registerContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const registerContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await registerContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `registerContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `registerContract =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  transaction{\r\n    prepare(acct: AuthAccount){\r\n        log(acct.address)\r\n    }\r\n}\n`;\n\n/**\n* Method to generate cadence code for scratch transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const scratchTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `scratch =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends scratch transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const scratch = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await scratchTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `scratch =>`);\n  reportMissing(\"signers\", signers.length, 1, `scratch =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(offset: UInt64){\n    prepare(signer:AuthAccount){\n        FlowManager.setBlockOffset(offset)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for setBlockOffset transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const setBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `setBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends setBlockOffset transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const setBlockOffset = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await setBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `setBlockOffset =>`);\n  reportMissing(\"signers\", signers.length, 1, `setBlockOffset =>`);\n\n  return sendTransaction({code, ...props})\n}","/** pragma type transaction **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  sendTransaction\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\ntransaction(name:String, code: String, manager: Address ##ARGS-WITH-TYPES##) {\n    prepare(acct: AuthAccount){\n        let decoded = code.decodeHex()\n\n        if acct.contracts.get(name: name) == nil {\n          acct.contracts.add(name: name, code: decoded)\n        } else {\n          acct.contracts.update__experimental(name: name, code: decoded)\n        }\n\n        let linkPath = FlowManager.contractManagerPath\n        let contractManager = getAccount(manager)\n                    .getCapability(linkPath)!\n                    .borrow<&FlowManager.Mapper>()!\n\n        let address = acct.address\n        contractManager.setAddress(name, address: address)\n    }\n}\n\n`;\n\n/**\n* Method to generate cadence code for updateContract transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const updateContractTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `updateContract =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Sends updateContract transaction to the network\n* @param {Object.<string, string>} props.addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> props.args - list of arguments\n* @param Array<*> props.signers - list of signers\n*/\nexport const updateContract = async (props) => {\n  const { addressMap, args = [], signers = [] } = props;\n  const code = await updateContractTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 3, `updateContract =>`);\n  reportMissing(\"signers\", signers.length, 1, `updateContract =>`);\n\n  return sendTransaction({code, ...props})\n}","import { createAccountTemplate, createAccount } from \"./createAccount\";\nimport { deployContractTemplate, deployContract } from \"./deployContract\";\nimport { initManagerTemplate, initManager } from \"./initManager\";\nimport { mintTokensTemplate, mintTokens } from \"./mintTokens\";\nimport { registerContractTemplate, registerContract } from \"./registerContract\";\nimport { scratchTemplate, scratch } from \"./scratch\";\nimport { setBlockOffsetTemplate, setBlockOffset } from \"./setBlockOffset\";\nimport { updateContractTemplate, updateContract } from \"./updateContract\";\n\nexport default {\n  createAccountTemplate,\n  createAccount,\n  deployContractTemplate,\n  deployContract,\n  initManagerTemplate,\n  initManager,\n  mintTokensTemplate,\n  mintTokens,\n  registerContractTemplate,\n  registerContract,\n  scratchTemplate,\n  scratch,\n  setBlockOffsetTemplate,\n  setBlockOffset,\n  updateContractTemplate,\n  updateContract,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { sendTransaction } from \"./interaction\";\nimport { getServiceAddress } from \"./manager\";\nimport { defaultsByName, getContractCode } from \"./file\";\n\nimport txRegistry from \"./generated/transactions\";\nimport { isObject } from \"./utils\";\nimport { extractContractParameters, generateSchema, splitArgs } from \"flow-cadut\";\nimport { replaceImportAddresses, resolveImports } from \"./imports\";\n\nconst { updateContractTemplate, deployContractTemplate } = txRegistry;\n\nexport const hexContract = (contract) => Buffer.from(contract, \"utf8\").toString(\"hex\");\n\nconst extractParameters = async (params) => {\n  let ixName, ixTo, ixAddressMap, ixArgs, ixUpdate;\n\n  if (isObject(params[0])) {\n    const [props] = params;\n    const { name, to, addressMap, args, update } = props;\n\n    if (!name) {\n      throw Error(\"'name' field is missing\");\n    }\n\n    ixName = name;\n    ixTo = to;\n    ixArgs = args;\n    ixAddressMap = addressMap;\n    ixUpdate = update;\n  } else {\n    [ixName, ixTo, ixAddressMap, ixArgs, ixUpdate] = params;\n  }\n\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    FlowManager: serviceAddress,\n    ...ixAddressMap,\n  };\n\n  return {\n    name: ixName,\n    to: ixTo,\n    args: ixArgs,\n    update: ixUpdate,\n    addressMap,\n  };\n};\n\n/**\n * Deploys a contract by name to specified account\n * Returns transaction result.\n * @param {string} props.to - If no address is supplied, the contract will be deployed to the emulator service account.\n * @param {string} props.name  - The name of the contract to look for. This should match a .cdc file located at the specified `basePath`.\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced.\n * @returns {Promise<any>}\n */\nexport const deployContractByName = async (...props) => {\n  const params = await extractParameters(props);\n  const { to, name, addressMap, args, update = false } = params;\n\n  const resolvedAddress = to || (await getServiceAddress());\n  const contractCode = await getContractCode({ name, addressMap });\n\n  return deployContract({\n    to: resolvedAddress,\n    code: contractCode,\n    name,\n    args,\n    update,\n  });\n};\n\n/**\n * Deploys contract as Cadence code to specified account\n * Returns transaction result.\n * @param {string} props.code - Cadence code for contract to be deployed\n * @param {string} props.to - If no address is supplied, the contract\n * will be deployed to the emulator service account\n * @param {string} props.name  - The name of the contract to look for. This should match\n * a .cdc file located at the specified `basePath`\n * @param {{string:string}} [props.addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [props.update=false] - flag to indicate whether the contract shall be replaced\n */\nexport const deployContract = async (props) => {\n  const { to, code: contractCode, name, args, update } = props;\n\n  const params = await extractContractParameters(contractCode);\n  const ixName = name || params.contractName\n\n  // TODO: extract name from contract code\n  const containerAddress = to || (await getServiceAddress());\n  const managerAddress = await getServiceAddress();\n\n  // Replace import addresses, before hexing contract code\n  const deployedContracts = await resolveImports(contractCode);\n  const serviceAddress = await getServiceAddress();\n  const addressMap = {\n    ...defaultsByName,\n    ...deployedContracts,\n    FlowManager: serviceAddress,\n  };\n\n  const hexedCode = hexContract(\n    replaceImportAddresses(contractCode, addressMap)\n  );\n\n  let code = update\n    ? await updateContractTemplate(addressMap)\n    : await deployContractTemplate(addressMap);\n\n  let deployArgs = [ixName, hexedCode, managerAddress];\n\n  if (args) {\n    deployArgs = deployArgs.concat(args);\n    const schema = generateSchema(params.args).map((item) => splitArgs(item)[0]);\n\n    const argLetter = \"abcdefghijklmnopqrstuvwxyz\";\n    let argList = [];\n    for (let i = 0; i < schema.length; i++) {\n      const value = schema[i];\n      argList.push(`${argLetter[i]}: ${value}`);\n    }\n\n    code = code.replace(\"##ARGS-WITH-TYPES##\", `, ${params.args}`);\n    code = code.replace(\"##ARGS-LIST##\", argList);\n  } else {\n    code = code.replace(\"##ARGS-WITH-TYPES##\", ``);\n    code = code.replace(\"##ARGS-LIST##\", \"\");\n  }\n\n  const signers = [containerAddress];\n\n  return sendTransaction({\n    code,\n    args: deployArgs,\n    signers,\n  });\n};\n","/** pragma type contract **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  deployContract,\n} from 'flow-cadut'\n\nexport const CODE = `\n  pub contract FlowManager {\r\n\r\n    /// Account Manager\r\n    pub event AccountAdded(address: Address)\r\n\r\n    pub struct Mapper {\r\n        pub let accounts: {String: Address}\r\n\r\n        pub fun getAddress(_ name: String): Address? {\r\n            return self.accounts[name]\r\n        }\r\n\r\n        pub fun setAddress(_ name: String, address: Address){\r\n            self.accounts[name] = address\r\n            emit FlowManager.AccountAdded(address: address)\r\n        }\r\n\r\n        init(){\r\n            self.accounts = {}\r\n        }\r\n    }\r\n\r\n    pub fun getAccountAddress(_ name: String): Address?{\r\n        let accountManager = self.account\r\n            .getCapability(self.accountManagerPath)\r\n            .borrow<&FlowManager.Mapper>()!\r\n\r\n        return accountManager.getAddress(name)\r\n    }\r\n\r\n    pub let defaultAccounts: {Address : String}\r\n\r\n    pub fun resolveDefaultAccounts(_ address: Address): Address{\r\n        let alias = self.defaultAccounts[address]!\r\n        return self.getAccountAddress(alias)!\r\n    }\r\n\r\n    pub let accountManagerStorage: StoragePath\r\n    pub let contractManagerStorage: StoragePath\r\n    pub let accountManagerPath: PublicPath\r\n    pub let contractManagerPath: PublicPath\r\n\r\n    /// Environment Manager\r\n    pub event BlockOffsetChanged(offset: UInt64)\r\n\r\n    pub struct MockBlock {\r\n        pub let id: [UInt8; 32]\r\n        pub let height: UInt64\r\n        pub let view: UInt64\r\n        pub let timestamp: UFix64\r\n\r\n        init(_ id: [UInt8; 32], _ height: UInt64, _ view: UInt64, _ timestamp: UFix64){\r\n            self.id = id\r\n            self.height = height\r\n            self.view = view\r\n            self.timestamp = timestamp\r\n        }\r\n    }\r\n\r\n    pub fun setBlockOffset(_ offset: UInt64){\r\n        self.blockOffset = offset\r\n        emit FlowManager.BlockOffsetChanged(offset: offset)\r\n    }\r\n\r\n    pub fun getBlockHeight(): UInt64 {\r\n        var block = getCurrentBlock()\r\n        return block.height + self.blockOffset\r\n    }\r\n\r\n    pub fun getBlock(): MockBlock {\r\n        var block =  getCurrentBlock()\r\n        let mockBlock = MockBlock(block.id, block.height, block.view, block.timestamp);\r\n        return mockBlock\r\n    }\r\n\r\n    pub var blockOffset: UInt64;\r\n\r\n\r\n    // Initialize contract\r\n    init(){\r\n        // Environment defaults\r\n        self.blockOffset = 0;\r\n\r\n        // Account Manager initialization\r\n        let accountManager = Mapper()\r\n        let contractManager = Mapper()\r\n\r\n        self.defaultAccounts = {\r\n          0x01: \"Alice\",\r\n          0x02: \"Bob\",\r\n          0x03: \"Charlie\",\r\n          0x04: \"Dave\",\r\n          0x05: \"Eve\"\r\n        }\r\n\r\n        self.accountManagerStorage = /storage/testSuitAccountManager\r\n        self.contractManagerStorage = /storage/testSuitContractManager\r\n\r\n        self.accountManagerPath = /public/testSuitAccountManager\r\n        self.contractManagerPath = /public/testSuitContractManager\r\n        \r\n        // Destroy previously stored values\r\n        self.account.load<Mapper>(from: self.accountManagerStorage)\r\n        self.account.load<Mapper>(from: self.contractManagerStorage)\r\n\r\n        self.account.save(accountManager, to: self.accountManagerStorage)\r\n        self.account.save(contractManager, to: self.contractManagerStorage)\r\n\r\n        self.account.link<&Mapper>(self.accountManagerPath, target: self.accountManagerStorage)\r\n        self.account.link<&Mapper>(self.contractManagerPath, target: self.contractManagerStorage)\r\n    }\r\n}\r\n \n`;\n\n/**\n* Method to generate cadence code for FlowManager transaction\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const FlowManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `FlowManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\n\n/**\n* Deploys FlowManager transaction to the network\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n* @param Array<*> args - list of arguments\n* param Array<string> - list of signers\n*/\nexport const  deployFlowManager = async (props) => {\n  const { addressMap = {} } = props;\n  const code = await FlowManagerTemplate(addressMap);\n  const name = \"FlowManager\"\n\n  return deployContract({ code, name, ...props })\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main(){\n    // the body can be empty, cause script will throw error if FlowManager is not\n    // added to service address\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const checkManagerTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `checkManager =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const checkManager = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await checkManagerTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `checkManager =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.accountManagerPath\r\n    let accountManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return accountManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getAccountAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getAccountAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getAccountAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getAccountAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getAccountAddress =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  // This script reads the balance field of an account's FlowToken Balance\r\n\r\nimport FungibleToken from 0xFUNGIBLETOKENADDRESS\r\nimport ExampleToken from 0xTOKENADDRESS\r\n\r\npub fun main(account: Address): UFix64 {\r\n    let acct = getAccount(account)\r\n    let vaultRef = acct.getCapability(/public/exampleTokenBalance)!.borrow<&ExampleToken.Vault{FungibleToken.Balance}>()\r\n        ?? panic(\"Could not borrow Balance reference to the Vault\")\r\n\r\n    return vaultRef.balance\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBalanceTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBalance =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBalance = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBalanceTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 1, `getBalance =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\n\npub fun main():UInt64 {\n    return FlowManager.blockOffset\n}\n\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getBlockOffsetTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getBlockOffset =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getBlockOffset = async (props = {}) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getBlockOffsetTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 0, `getBlockOffset =>`);\n\n  return executeScript({code, ...props})\n}","/** pragma type script **/\n\nimport {\n  getEnvironment,\n  replaceImportAddresses,\n  reportMissingImports,\n  reportMissing,\n  executeScript\n} from 'flow-cadut'\n\nexport const CODE = `\n  import FlowManager from 0x01\r\n\r\npub fun main(name: String, managerAccount: Address):Address? {\r\n    let manager = getAccount(managerAccount)\r\n    let linkPath = FlowManager.contractManagerPath\r\n    let contractManager = manager\r\n                        .getCapability(linkPath)\r\n                        .borrow<&FlowManager.Mapper>()!\r\n\r\n    return contractManager.getAddress(name)\r\n\r\n}\n`;\n\n/**\n* Method to generate cadence code for TestAsset\n* @param {Object.<string, string>} addressMap - contract name as a key and address where it's deployed as value\n*/\nexport const getContractAddressTemplate = async (addressMap = {}) => {\n  const envMap = await getEnvironment();\n  const fullMap = {\n  ...envMap,\n  ...addressMap,\n  };\n\n  // If there are any missing imports in fullMap it will be reported via console\n  reportMissingImports(CODE, fullMap, `getContractAddress =>`)\n\n  return replaceImportAddresses(CODE, fullMap);\n};\n\nexport const getContractAddress = async (props) => {\n  const { addressMap = {}, args = [] } = props\n  const code = await getContractAddressTemplate(addressMap);\n\n  reportMissing(\"arguments\", args.length, 2, `getContractAddress =>`);\n\n  return executeScript({code, ...props})\n}","import { checkManagerTemplate, checkManager } from \"./checkManager\";\nimport { getAccountAddressTemplate, getAccountAddress } from \"./getAccountAddress\";\nimport { getBalanceTemplate, getBalance } from \"./getBalance\";\nimport { getBlockOffsetTemplate, getBlockOffset } from \"./getBlockOffset\";\nimport { getContractAddressTemplate, getContractAddress } from \"./getContractAddress\";\nimport { getManagerAddressTemplate, getManagerAddress } from \"./getManagerAddress\";\n\nexport default {\n  checkManagerTemplate,\n  checkManager,\n  getAccountAddressTemplate,\n  getAccountAddress,\n  getBalanceTemplate,\n  getBalance,\n  getBlockOffsetTemplate,\n  getBlockOffset,\n  getContractAddressTemplate,\n  getContractAddress,\n  getManagerAddressTemplate,\n  getManagerAddress,\n};\n","import contracts from \"./contracts\";\nimport scripts from \"./scripts\";\nimport transactions from \"./transactions\";\n\nexport default {\n  contracts,\n  scripts,\n  transactions,\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { config } from \"@onflow/config\";\nimport { withPrefix } from \"./address\";\nimport { hexContract } from \"./deploy-code\";\nimport registry from \"./generated\";\n\nexport const initManager = async () => {\n  const code = await registry.transactions.initManagerTemplate();\n  const contractCode = await registry.contracts.FlowManagerTemplate();\n  const hexedContract = hexContract(contractCode);\n  const args = [hexedContract];\n\n  await sendTransaction({\n    code,\n    args,\n    service: true,\n  });\n};\n\nexport const getServiceAddress = async () => {\n  return withPrefix(await config().get(\"SERVICE_ADDRESS\"));\n};\n\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const addressMap = {\n    FlowManager: serviceAddress,\n  };\n\n  const code = await registry.scripts.checkManagerTemplate(addressMap);\n\n  let [result, e] = await executeScript({\n    code,\n    service: true,\n  });\n  if (e && result === null) {\n    await initManager();\n  }\n\n  return getServiceAddress();\n};\n\n// TODO: replace method above after Cadence will allow to get contracts list on PublicAccount\n/*\nexport const getManagerAddress = async () => {\n  const serviceAddress = await getServiceAddress();\n\n  const code = `\n    pub fun main(address: Address):Bool {\n      return getAccount(address).contracts.get(\"FlowManager\") != null\n    }\n  `;\n  const result = await executeScript({ code, args: [serviceAddress] });\n\n  if (!result) {\n    await initManager();\n  }\n\n  return serviceAddress;\n};\n */\n\nexport const getBlockOffset = async () => {\n  const FlowManager = await getManagerAddress();\n  const code = await registry.scripts.getBlockOffsetTemplate({ FlowManager });\n  return executeScript({ code });\n};\n\nexport const setBlockOffset = async (offset) => {\n  const FlowManager = await getManagerAddress();\n\n  const args = [offset];\n  const code = await registry.transactions.setBlockOffsetTemplate({ FlowManager });\n  const payer = [FlowManager];\n\n  return sendTransaction({ code, args, payer });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getManagerAddress } from \"./manager\";\nimport { executeScript } from \"./interaction\";\nimport { defaultsByName } from \"./file\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of the account where contract specified by name is currently deployed\n * @param {string} name - name of the account to look for\n * @param {boolean} [useDefaults=false] - whether we shall look into default addressed first\n * @returns {Promise<string>}\n */\nexport const getContractAddress = async (name, useDefaults = false) => {\n  // TODO: Maybe try to automatically deploy contract? 🤔\n\n  if (useDefaults) {\n    const defaultContract = defaultsByName[name];\n    if (defaultContract !== undefined) {\n      return defaultContract;\n    }\n  }\n\n  const managerAddress = await getManagerAddress();\n  const addressMap = { FlowManager: managerAddress };\n\n  const code = await registry.scripts.getContractAddressTemplate(addressMap);\n  const args = [name, managerAddress];\n  const [contractAddress] = await executeScript({\n    code,\n    args,\n    service: true,\n  });\n\n  return contractAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getContractAddress } from \"./contract\";\nimport { defaultsByName } from \"./file\";\n\nconst REGEXP_IMPORT = /(\\s*import\\s*)([\\w\\d]+)(\\s+from\\s*)([\\w\\d\".\\\\/]+)/g;\n\nconst getPairs = (line) => {\n  return line\n    .split(/\\s/)\n    .map((item) => item.replace(/\\s/g, \"\"))\n    .filter((item) => item.length > 0 && item !== \"import\" && item !== \"from\");\n};\n\nconst collect = (acc, item) => {\n  const [contract, address] = item;\n  acc[contract] = address;\n  return acc;\n};\n\n/**\n * Returns address map for contracts defined in template code.\n * @param {string} code - Cadence code to parse.\n * @returns {*}\n */\nexport const extractImports = (code) => {\n  if (!code || code.length === 0) {\n    return {};\n  }\n  return code\n    .split(\"\\n\")\n    .filter((line) => line.includes(\"import\"))\n    .map(getPairs)\n    .reduce(collect, {});\n};\n\nexport const replaceImports = (code, addressMap) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract) => {\n    const newAddress = addressMap instanceof Function ? addressMap(contract) : addressMap[contract];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Returns Cadence template code with replaced import addresses\n * @param {string} code - Cadence template code.\n * @param {{string:string}} [addressMap={}] - name/address map or function to use as lookup table\n * for addresses in import statements.\n * @param byName - lag to indicate whether we shall use names of the contracts.\n * @returns {*}\n */\nexport const replaceImportAddresses = (code, addressMap, byName = true) => {\n  return code.replace(REGEXP_IMPORT, (match, imp, contract, _, address) => {\n    const key = byName ? contract : address;\n    const newAddress = addressMap instanceof Function ? addressMap(key) : addressMap[key];\n    return `${imp}${contract} from ${newAddress}`;\n  });\n};\n\n/**\n * Resolves import addresses defined in code template\n * @param {string} code - Cadence template code.\n * @returns {{string:string}} - name/address map\n */\nexport const resolveImports = async (code) => {\n  const addressMap = {};\n  const importList = extractImports(code);\n  for (const key in importList) {\n    if (defaultsByName[key]) {\n      addressMap[key] = defaultsByName[key];\n    } else {\n      const address = await getContractAddress(key);\n      addressMap[key] = address;\n    }\n  }\n  return addressMap;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { config } from \"@onflow/config\";\n\nimport { replaceImportAddresses } from \"./imports\";\nimport { isObject } from \"./utils\";\n\nexport const readFile = (path) => {\n  return fs.readFileSync(path, \"utf8\");\n};\n\n/**\n * Address map with access by name for contracts deployed to emulator by default.\n * @type {{FlowFees: string, FlowToken: string, FungibleToken: string}}\n */\nexport const defaultsByName = {\n  FlowToken: \"0x0ae53cb6e3f42a79\",\n  FungibleToken: \"0xee82856bf20e2aa6\",\n  FlowFees: \"0xe5a8b7f23e8b548f\",\n  FlowStorageFees: \"0xf8d6e0586b0a20c7\",\n};\n\n/**\n * Address map with access by address for contracts deployed to emulator by default.\n * @type {{\"0xe5a8b7f23e8b548f\": string, \"0xf8d6e0586b0a20c7\": string, \"0xee82856bf20e2aa6\": string, \"0x0ae53cb6e3f42a79\": string}}\n */\nexport const defaultsByAddress = {\n  \"0xe5a8b7f23e8b548f\": \"0xe5a8b7f23e8b548f\", // FlowFees\n  \"0xf8d6e0586b0a20c7\": \"0xf8d6e0586b0a20c7\", // FlowStorageFees\n  \"0x0ae53cb6e3f42a79\": \"0x0ae53cb6e3f42a79\", // FlowToken\n  \"0xee82856bf20e2aa6\": \"0xee82856bf20e2aa6\", // FungibleToken\n};\n\nconst SCRIPT = \"scripts\";\nconst TRANSACTION = \"transactions\";\nconst CONTRACT = \"contracts\";\n\nexport const templateType = {\n  SCRIPT,\n  TRANSACTION,\n  CONTRACT,\n};\n\nexport const getPath = async (name, type = TRANSACTION) => {\n  const configBase = await config().get(\"BASE_PATH\");\n\n  // We can simply overwrite \"configBase\" variable, but I believe it's better to leave it unchanged\n  let basePath = configBase;\n\n  // It's possible to pass a set of paths via object, so we need to check if that's the case\n  if (isObject(configBase)) {\n    const typePath = configBase[type];\n\n    // if there is a specific path for this type, then we shall resolve it\n    if (typePath) {\n      return path.resolve(typePath, `./${name}.cdc`);\n    }\n\n    // otherwise use \"base\" value\n    basePath = configBase.base;\n  }\n\n  return path.resolve(basePath, `./${type}/${name}.cdc`);\n};\n\n/**\n * Returns Cadence template for specified file. Replaces imports using provided address map\n * @param file - name of the file to look for.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @param {boolean} [byAddress=false] - flag to indicate if address map is address to address type.\n * @returns {string}\n */\nexport const getTemplate = (file, addressMap = {}, byAddress = false) => {\n  const rawCode = readFile(file);\n\n  const defaults = byAddress ? defaultsByAddress : defaultsByName;\n\n  return addressMap\n    ? replaceImportAddresses(rawCode, {\n        ...defaults,\n        ...addressMap,\n      })\n    : rawCode;\n};\n\n/**\n * Returns contract template using name of the file in \"contracts\" folder containing the code.\n * @param name - name of the contract template in \"contract\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getContractCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.CONTRACT);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns transaction template using name of the file in \"transactions\" folder containing the code.\n * @param name - name of the transaction template in \"transactions\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getTransactionCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.TRANSACTION);\n  return getTemplate(path, addressMap);\n};\n\n/**\n * Returns script template using name of the file in \"scripts\" folder containing the code.\n * @param name - name of the script template in \"scripts\" folder.\n * @param {{string:string}} [addressMap={}] - name/address map to use as lookup table for addresses in import statements.\n * @returns {Promise<string>}\n */\nexport const getScriptCode = async ({ name, addressMap }) => {\n  const path = await getPath(name, templateType.SCRIPT);\n  return getTemplate(path, addressMap);\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport registry from \"./generated\";\nimport { defaultsByName } from \"./file\";\n\nconst FlowTokenMap = { ExampleToken: defaultsByName.FlowToken };\n\nconst lowerFirst = (name) => {\n  return name[0].toLowerCase() + name.slice(1);\n};\n\nexport const makeMintTransaction = async (name) => {\n  const code = await registry.transactions.mintTokensTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n\nexport const makeGetBalance = async (name) => {\n  const code = await registry.scripts.getBalanceTemplate(FlowTokenMap);\n  const pattern = /(ExampleToken)/gi;\n\n  return code.replace(pattern, (match) => {\n    return match === \"ExampleToken\" ? name : lowerFirst(name);\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { defaultsByName } from \"./file\";\nimport { replaceImportAddresses } from \"./imports\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { makeGetBalance, makeMintTransaction } from \"./templates\";\n\n/**\n * Returns current FlowToken balance of account specified by address\n * @param {string} address - address of account to check\n * @returns {Promise<*>}\n */\nexport const getFlowBalance = async (address) => {\n  const raw = await makeGetBalance(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [address];\n\n  return executeScript({ code, args });\n};\n\n/**\n * Sends transaction to mint specified amount of FlowToken and send it to recipient.\n * Returns result of the transaction.\n * @param {string} recipient - address of recipient account\n * @param {string} amount - amount to mint and send\n * @returns {Promise<*>}\n */\nexport const mintFlow = async (recipient, amount) => {\n  const raw = await makeMintTransaction(\"FlowToken\");\n  const code = replaceImportAddresses(raw, defaultsByName);\n  const args = [recipient, amount];\n  return sendTransaction({ code, args });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { pubFlowKey } from \"./crypto\";\nimport { executeScript, sendTransaction } from \"./interaction\";\nimport { getManagerAddress } from \"./manager\";\n\nimport registry from \"./generated\";\n\n/**\n * Returns address of account specified by name. If account with that name doesn't exist it will be created\n * and assigned provided name as alias\n * @param {string} accountName - name of the account\n * @returns {Promise<string|*>}\n */\nexport const getAccountAddress = async (accountName) => {\n  const name = accountName || `deployment-account-${(Math.random() * Math.pow(10, 8)).toFixed(0)}`;\n\n  const managerAddress = await getManagerAddress();\n\n  const addressMap = {\n    FlowManager: managerAddress,\n  };\n\n  let accountAddress;\n\n  const code = await registry.scripts.getAccountAddressTemplate(addressMap);\n\n  const args = [name, managerAddress];\n\n  const [result] = await executeScript({\n    code,\n    args,\n    service: true,\n  });\n  accountAddress = result;\n\n  if (accountAddress === null) {\n    const code = await registry.transactions.createAccountTemplate(addressMap);\n    const publicKey = await pubFlowKey();\n    const args = [name, publicKey, managerAddress];\n\n    const [result] = await sendTransaction({\n      code,\n      args,\n    });\n    const { events } = result;\n    const event = events.find((event) => event.type.includes(\"AccountCreated\"));\n    accountAddress = event.data.address;\n  }\n  return accountAddress;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { expect } = global;\n\n/**\n * Return Promise from passed interaction\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*>\n * */\nexport const promise = async (ix) => {\n  if (typeof ix === \"function\") {\n    return await ix();\n  }\n  return await ix;\n};\n\n/**\n * Ensure transaction did not throw and sealed.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - transaction result\n * */\nexport const shallPass = async (ix) => {\n  const wrappedInteraction = promise(ix);\n\n  const response = await wrappedInteraction;\n  const [result, error] = response\n\n  if(error){\n    throw error\n  }\n\n  let resolvedStatus;\n  let resolvedErrorMessage;\n  if (Array.isArray(result)) {\n    const { status, errorMessage } = result;\n    resolvedStatus = status;\n    resolvedErrorMessage = errorMessage;\n  } else {\n    const { status, errorMessage } = result;\n    resolvedStatus = status;\n    resolvedErrorMessage = errorMessage;\n  }\n\n  await expect(resolvedStatus).toBe(4);\n  await expect(resolvedErrorMessage).toBe(\"\");\n\n  return response;\n};\n\n/**\n * Ensure interaction did not throw and return result of it\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> - result of interaction\n * */\nexport const shallResolve = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  const response = await wrappedInteraction;\n  const [result, error] = response;\n  expect(error).not.toBe(result)\n  expect(error).toBe(null)\n\n  return response;\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallRevert = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  const response = await wrappedInteraction;\n  const [result, error] = response\n  await expect(result).toBe(null);\n  await expect(error).not.toBe(null);\n\n  return response\n};\n\n/**\n * Ensure interaction throws an error.\n * @param {function | Promise} ix - Promise or function to wrap\n * @returns Promise<*> -  result of interaction\n * */\nexport const shallThrow = async (ix) => {\n  const wrappedInteraction = promise(ix);\n  const response = await wrappedInteraction;\n\n  const [result, error] = response\n  await expect(result).toBe(null);\n  await expect(error).not.toBe(null);\n\n  return response;\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getServiceAddress } from \"./manager\";\n\nexport const importManager = async () => {\n  const serviceAddress = await getServiceAddress();\n  return `import FlowManager from ${serviceAddress}`;\n};\n\nexport const importExists = (contractName, code) => {\n  return new RegExp(`import\\\\s+${contractName}`).test(code);\n};\n\nexport const builtInMethods = async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/getCurrentBlock\\(\\).height/g, `FlowManager.getBlockHeight()`);\n};\n\nconst addressToIndex = (address) => {\n  return parseInt(address) - 1;\n};\n\nconst addressToAlias = (accounts) => (address) => accounts[addressToIndex(address)];\n\nexport const playgroundImport = (accounts) => async (code) => {\n  let injectedImports = code;\n  if (!importExists(\"FlowManager\", code)) {\n    const imports = await importManager();\n    injectedImports = `\n      ${imports}\n      ${code}  \n  `;\n  }\n  return injectedImports.replace(/(?:getAccount\\()(.+)(?:\\))/g, (match, g1) => {\n    const alias = addressToAlias(accounts)(g1);\n    if (!alias) {\n      return `getAccount(FlowManager.resolveDefaultAccounts(${g1}))`;\n    }\n    return `getAccount(FlowManager.getAccountAddress(\"${alias}\"))`;\n  });\n};\n","/*\n * Flow JS Testing\n *\n * Copyright 2020-2021 Dapper Labs, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { send, build, getBlock, decode } from \"@onflow/fcl\";\n\nconst { spawn } = require(\"child_process\");\n\nconst DEFAULT_HTTP_PORT = 8080;\nconst DEFAULT_GRPC_PORT = 3569;\n\n/** Class representing emulator */\nexport class Emulator {\n  /**\n   * Create an emulator.\n   */\n  constructor() {\n    this.initialized = false;\n    this.logging = false;\n    this.filters = [\"debug\"];\n    this.logProcessor = (item) => item;\n  }\n\n  /**\n   * Set logging flag.\n   * @param {boolean} logging - whether logs shall be printed\n   */\n  setLogging(logging) {\n    this.logging = logging;\n  }\n\n  /**\n   * Log message with a specific type.\n   * @param {*} message - message to put into log output\n   * @param {\"log\"|\"error\"} type - type of the message to output\n   */\n  log(message, type = \"log\") {\n    if (this.logging) {\n      const logType = type === \"debug\" ? \"log\" : type;\n      console[logType](message);\n    }\n  }\n\n  extractKeyValue(str) {\n    // TODO: add regexp check that it conforms to necessary pattern\n    const [key, value] = str.split(\"=\");\n    if (value.includes(\"LOG\")) {\n      return { key, value: value.replace(`\"\\x1b[1;34m`, `\"\\x1b[1[34m`) };\n    }\n    return { key, value };\n  }\n\n  fixJSON(msg) {\n    const splitted = msg.split(\"\\n\").filter((item) => item !== \"\");\n    const reconstructed = splitted.length > 1 ? `[${splitted.join(\",\")}]` : splitted[0];\n    return reconstructed;\n  }\n\n  parseDataBuffer(data) {\n    const message = data.toString();\n    try {\n      if (message.includes(\"msg\")) {\n        return JSON.parse(this.fixJSON(message));\n      }\n    } catch (e) {\n      console.error(e);\n      return { msg: e, level: \"JSON Error\" };\n    }\n    return { msg: message, level: \"parser\" };\n  }\n\n  /**\n   * Start emulator.\n   * @param {number} port - port to use for accessApi\n   * @param {boolean} logging - whether logs shall be printed\n   * @returns Promise<*>\n   */\n  async start(port = DEFAULT_HTTP_PORT, logging = false, options = {}) {\n    const { flags = \"\" } = options;\n    const offset = port - DEFAULT_HTTP_PORT;\n    let grpc = DEFAULT_GRPC_PORT + offset;\n\n    this.logging = logging;\n    this.process = spawn(\"flow\", [\n      \"emulator\",\n      \"--verbose\",\n      `--log-format=JSON`,\n      `--admin-port=${port}`,\n      `--port=${grpc}`,\n      flags,\n    ]);\n    this.logProcessor = (item) => item;\n\n    return new Promise((resolve, reject) => {\n      let internalId;\n      const checkLiveness = async function () {\n        try {\n          await send(build([getBlock(false)])).then(decode);\n          clearInterval(internalId);\n          this.initialized = true;\n          resolve(true);\n        } catch (err) {} // eslint-disable-line no-unused-vars, no-empty\n      };\n      internalId = setInterval(checkLiveness, 100);\n\n      this.process.stdout.on(\"data\", (buffer) => {\n        const data = this.parseDataBuffer(buffer);\n        \n        if (Array.isArray(data)) {\n          let filtered = data;\n          if (this.filters.length > 0) {\n            filtered = data.filter((item) => {\n              return this.filters.includes(item.level);\n            });\n          }\n          for (let i = 0; i < filtered.length; i++) {\n            const { level = \"log\", msg } = data[i];\n            this.log(`${level.toUpperCase()}: ${msg}`);\n          }\n        } else {\n          const { level, msg } = data;\n          if (this.filters.length > 0) {\n            if (this.filters.includes(data.level)) {\n              this.log(`${level.toUpperCase()}: ${msg}`);\n              if (data.msg.includes(\"Starting HTTP server\")) {\n                this.log(\"EMULATOR IS UP! Listening for events!\");\n              }\n            }\n          } else {\n            this.log(`${level.toUpperCase()}: ${msg}`);\n            if (data.msg.includes(\"Starting HTTP server\")) {\n              this.log(\"EMULATOR IS UP! Listening for events!\");\n            }\n          }\n        }\n      });\n\n      this.process.stderr.on(\"data\", (buffer) => {\n        const { message } = this.parseDataBuffer(buffer);\n\n        this.log(`EMULATOR ERROR: ${message}`, \"error\");\n        this.initialized = false;\n        clearInterval(internalId);\n        reject();\n      });\n\n      this.process.on(\"close\", (code) => {\n        if (this.filters.includes(\"service\")) {\n          this.log(`EMULATOR: process exited with code ${code}`);\n        }\n        this.initialized = false;\n        clearInterval(internalId);\n        resolve(false);\n      });\n    });\n  }\n\n  /**\n   * Clear all log filters.\n   * @returns void\n   **/\n  clearFilters() {\n    this.filters = [];\n  }\n\n  /**\n   * Remove specific type of log filter.\n   * @param {(debug|info|warning)} type - type of message\n   * @returns void\n   **/\n  removeFilter(type) {\n    this.filters = this.filters((item) => item !== type);\n  }\n\n  /**\n   * Add log filter.\n   * @param {(debug|info|warning)} type type - type of message\n   * @returns void\n   **/\n  addFilter(type) {\n    if (!this.filters.includes(type)) {\n      this.filters.push(type);\n    }\n  }\n\n  /**\n   * Stop emulator.\n   * @returns Promise<*>\n   */\n  async stop() {\n    // eslint-disable-next-line no-undef\n    return new Promise((resolve) => {\n      this.process.kill();\n      setTimeout(() => {\n        this.initialized = false;\n        resolve(false);\n      }, 50);\n    });\n  }\n}\n\n/** Singleton instance */\nexport default new Emulator();\n"],"names":["get","scope","path","fallback","split","length","head","rest","_error","set","key","env","conf","value","flowConfig","config","put","getConfigValue","init","basePath","props","port","pkey","process","sansPrefix","address","replace","withPrefix","ec","EC","signWithKey","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sign","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","authorization","addr","keyId","account","serviceAddress","tempId","fcl","signingFunction","data","signature","message","isObject","arg","_settle","pact","state","_Pact","o","bind","v","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","body","recover","extractParameters","ixType","params","getServiceAddress","code","ixCode","signers","ixSigners","args","ixArgs","limit","ixLimit","addressMap","defaultsByName","deployedContracts","FlowManager","replaceImportAddresses","target","check","keys","push","array","reject","i","_cycle","thenable","transformer","ixTransformers","ixService","resolveImports","ixName","name","transformers","service","Error","getScriptCode","getTransactionCode","sendTransaction","extractor","send","ix","response","tx","onceExecuted","serviceAuth","transaction","payer","proposer","auths","map","authorizations","resolveArguments","resolvedArgs","executeScript","decode","script","CODE","createAccountTemplate","getEnvironment","envMap","fullMap","reportMissingImports","deployContractTemplate","initManagerTemplate","mintTokensTemplate","registerContractTemplate","scratchTemplate","setBlockOffsetTemplate","updateContractTemplate","createAccount","reportMissing","mintTokens","registerContract","scratch","updateContract","txRegistry","hexContract","contract","ixTo","ixAddressMap","ixUpdate","to","deployContractByName","resolvedAddress","getContractCode","contractCode","deployContract","extractContractParameters","containerAddress","managerAddress","hexedCode","deployArgs","schema","generateSchema","item","splitArgs","argLetter","argList","contractName","transactions","getManagerAddress","registry","hexedContract","initManager","getBlockOffset","setBlockOffset","offset","getContractAddress","useDefaults","defaultContract","undefined","contractAddress","REGEXP_IMPORT","getPairs","line","filter","collect","acc","extractImports","includes","reduce","byName","match","imp","_","Function","_forTo","FlowToken","FungibleToken","FlowFees","FlowStorageFees","defaultsByAddress","getPath","type","configBase","typePath","resolve","base","getTemplate","file","byAddress","rawCode","fs","readFileSync","readFile","FlowTokenMap","ExampleToken","lowerFirst","toLowerCase","slice","getFlowBalance","makeGetBalance","raw","mintFlow","recipient","amount","makeMintTransaction","getAccountAddress","accountName","Math","random","pow","toFixed","accountAddress","_Buffer","publicKey","getPublic","rlp","encode","pubFlowKey","events","event","find","expect","global","promise","shallPass","wrappedInteraction","error","resolvedStatus","resolvedErrorMessage","Array","isArray","status","errorMessage","toBe","shallResolve","not","shallRevert","shallThrow","builtInMethods","injectedImports","RegExp","test","importExists","importManager","imports","spawn","require","constructor","initialized","logging","filters","logProcessor","setLogging","log","console","extractKeyValue","str","fixJSON","msg","splitted","join","parseDataBuffer","JSON","parse","level","start","options","flags","grpc","Promise","internalId","setInterval","build","getBlock","clearInterval","_this2","stdout","on","buffer","filtered","toUpperCase","stderr","clearFilters","removeFilter","addFilter","stop","_this3","kill","setTimeout"],"mappings":"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"}